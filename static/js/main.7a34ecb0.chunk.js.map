{"version":3,"sources":["images/heckling/chrisFarley.gif","images/heckling/jamesCorden.gif","images/heckling/neilPatrickHarris.gif","images/questions/dragon.jpg","images.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","images","heckling","chrisFarley","jamesCorden","neilPatrickHarris","questions","dragon","answer","image","Confetti","useWindowSize","width","height","Home","useForm","register","handleSubmit","errors","useState","isCorrect","setCorrect","isIncorrect","setIncorrect","incorrectCount","setIncorrectCount","questionIndex","useParams","console","log","className","onSubmit","guess","toLowerCase","type","name","autoComplete","ref","required","onChange","value","cx","src","App","isMenuOpen","setMenuOpen","to","onClick","aria-label","aria-controls","path","pathname","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,+C,mBCA3CD,EAAOC,QAAU,IAA0B,oC,8TCM9BC,EAAS,CACpBC,SAAU,CACRC,gBACAC,gBACAC,uBAEFC,UAAW,CACTC,aCGED,G,MAAY,CAAC,CACjBE,OAAQ,SACRC,MAAO,YAGHC,EAAW,WAAO,IAAD,EACKC,MAAlBC,EADa,EACbA,MAAOC,EADM,EACNA,OACf,OACE,kBAAC,IAAD,CACED,MAAOA,EACPC,OAAQA,KAKRC,EAAO,SAAC,GAAS,qBACsBC,cAAnCC,EADY,EACZA,SAAUC,EADE,EACFA,aAAcC,EADZ,EACYA,OADZ,EAEYC,oBAAS,GAFrB,mBAEbC,EAFa,KAEFC,EAFE,OAGgBF,oBAAS,GAHzB,mBAGbG,EAHa,KAGAC,EAHA,OAIwBJ,mBAAS,GAJjC,mBAIbK,EAJa,KAIGC,EAJH,KAKZC,EAAkBC,cAAlBD,cAmBR,OADAE,QAAQC,IAAI,CAAEL,mBAEZ,oCACE,yBAAKM,UAAU,SACb,0BAAMA,UAAU,OAAOC,SAAUd,GApBtB,SAAC,GAAe,IAAbe,EAAY,EAAZA,MAEZV,EADShB,EAAUoB,GAAelB,SACTwB,EAAMC,cACjCX,GACFD,GAAW,GACXE,GAAa,GACbE,EAAkBD,EAAiB,GACnCI,QAAQC,IAAI,gBAEZR,GAAW,GACXE,GAAa,GACbE,EAAkB,GAClBG,QAAQC,IAAI,aAEdD,QAAQC,IAAI,CAAEP,cAAaI,sBAQrB,0BAAMI,UAAU,eAAhB,cACA,yBAAKA,UAAU,gBACb,2BACEI,KAAK,OACLC,KAAK,QACLC,aAAa,MACbC,IAAKrB,EAAS,CAAEsB,UAAU,IAC1BC,SAAU,WACRhB,GAAa,MAGjB,2BAAOW,KAAK,SAASM,MAAM,+BAE5BtB,EAAOc,OACN,uBAAGF,UAAU,oBAAb,yEAGJ,yBAAKA,UAAWW,IAAG,WAAa,CAC9B,oBAAqBnB,KAErB,yBAAKoB,IAAKzC,EAAOC,SAASC,gBAG9B,yBAAK2B,UAAU,YACb,yBAAKA,UAAU,6BACb,yBAAKY,IAAKzC,EAAOK,UAAUC,WAG9Ba,GAAa,kBAAC,EAAD,QAgDLuB,EA1CH,WAAO,IAAD,EACkBxB,oBAAS,GAD3B,mBACTyB,EADS,KACGC,EADH,KAGhB,OACE,kBAAC,IAAD,KACE,yBAAKf,UAAU,OACb,yBAAKA,UAAU,OACb,wBAAIA,UAAU,cACZ,kBAAC,IAAD,CAAMgB,GAAG,KAAT,YAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEF,4BACEhB,UAAWW,IAAG,+CAAgD,CAC5D,YAAaG,IAEfG,QAAS,kBAAMF,GAAaD,IAC5BV,KAAK,SACLc,aAAW,OACXC,gBAAc,cAEd,0BAAMnB,UAAU,iBACd,0BAAMA,UAAU,uBAItB,yBAAKA,UAAU,WACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoB,KAAK,mBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,IAAD,CAAUJ,GAAI,CAAEK,SAAU,cCnHpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.7a34ecb0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chrisFarley.67ab4047.gif\";","module.exports = __webpack_public_path__ + \"static/media/jamesCorden.a9910605.gif\";","module.exports = __webpack_public_path__ + \"static/media/neilPatrickHarris.0c746bac.gif\";","module.exports = __webpack_public_path__ + \"static/media/dragon.8b0ef686.jpg\";","import chrisFarley from './images/heckling/chrisFarley.gif';\nimport jamesCorden from './images/heckling/jamesCorden.gif';\nimport neilPatrickHarris from './images/heckling/neilPatrickHarris.gif';\n\nimport dragon from './images/questions/dragon.jpg';\n\nexport const images = {\n  heckling: {\n    chrisFarley,\n    jamesCorden,\n    neilPatrickHarris,\n  },\n  questions: {\n    dragon,\n  },\n};\n","import React, { useState } from 'react';\nimport cx from 'classnames/bind';\nimport { useForm } from 'react-hook-form'\nimport {\n  BrowserRouter as Router,\n  Link,\n  Route,\n  Switch,\n  useParams,\n  Redirect,\n} from \"react-router-dom\";\nimport useWindowSize from 'react-use/lib/useWindowSize'\nimport ReactConfetti from 'react-confetti'\nimport { images } from './images';\nimport './App.scss';\n\nconst questions = [{\n  answer: 'dragon',\n  image: 'dragon'\n}]\n\nconst Confetti = () => {\n  const { width, height } = useWindowSize()\n  return (\n    <ReactConfetti\n      width={width}\n      height={height}\n    />\n  )\n}\n\nconst Home = ({ }) => {\n  const { register, handleSubmit, errors } = useForm()\n  const [isCorrect, setCorrect] = useState(false);\n  const [isIncorrect, setIncorrect] = useState(false);\n  const [incorrectCount, setIncorrectCount] = useState(0);\n  const { questionIndex } = useParams();\n\n  const onSubmit = ({ guess }) => {\n    const answer = questions[questionIndex].answer;\n    const isIncorrect = answer !== guess.toLowerCase();\n    if (isIncorrect) {\n      setCorrect(false); // needed?\n      setIncorrect(true);\n      setIncorrectCount(incorrectCount + 1);\n      console.log('INCORRECT!');\n    } else {\n      setCorrect(true);\n      setIncorrect(false);\n      setIncorrectCount(0);\n      console.log('CORRECT!');\n    }\n    console.log({ isIncorrect, questionIndex });\n  }\n  console.log({ incorrectCount })\n  return (\n    <>\n      <div className=\"guess\">\n        <form className=\"form\" onSubmit={handleSubmit(onSubmit)}>\n        {/* register your input into the hook by invoking the \"register\" function */}\n          <span className=\"form__label\">Guess here</span>\n          <div className=\"form__fields\">\n            <input\n              type=\"text\"\n              name=\"guess\"\n              autoComplete=\"off\"\n              ref={register({ required: true })}\n              onChange={() => {\n                setIncorrect(false);\n              }}\n            />\n            <input type=\"submit\" value=\"ðŸ‘‰ ðŸ”´\" />\n          </div>\n          {errors.guess && (\n            <p className=\"validation-error\">Try a little harder... literally anything is better than your guess.</p>\n          )}\n        </form>\n        <div className={cx('heckling', ({\n          'heckling--hidden': !isIncorrect,\n        }))}>\n          <img src={images.heckling.chrisFarley} />\n        </div>\n      </div>\n      <div className=\"question\">\n        <div className=\"question__image-container\">\n          <img src={images.questions.dragon} />\n        </div>\n      </div>\n      {isCorrect && <Confetti />}\n    </>\n  )\n}\n\n\nconst App = () => {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n\n  return (\n    <Router>\n      <div className=\"app\">\n        <nav className=\"nav\">\n          <h1 className=\"nav__title\">\n            <Link to=\"/\">Pun fun</Link>\n          </h1>\n          <h2>\n            <Link to=\"/about\">About</Link>\n          </h2>\n          <button\n            className={cx('nav__hamburger hamburger hamburger--collapse', {\n              'is-active': isMenuOpen,\n            })}\n            onClick={() => setMenuOpen(!isMenuOpen)}\n            type=\"button\"\n            aria-label=\"Menu\"\n            aria-controls=\"navigation\"\n          >\n            <span className=\"hamburger-box\">\n              <span className=\"hamburger-inner\"></span>\n            </span>\n          </button>\n        </nav>\n        <div className=\"content\">\n          <Switch>\n            <Route path=\"/:questionIndex\">\n              <Home />\n            </Route>\n            <Route path=\"/\">\n              <Redirect to={{ pathname: '/0' }} />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}