{"version":3,"sources":["images/heckle/chrisFarley.gif","images/heckle/jamesCorden.gif","images/heckle/neilPatrickHarris.gif","images/questions/dragon.jpg","images/praise/albertEinstein.jpg","images/praise/goodWillHunting.gif","images.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","images","heckle","chrisFarley","jamesCorden","neilPatrickHarris","questions","dragon","praise","albertEinstein","goodWillHunting","answer","image","Confetti","stopConfetti","useEffect","setTimeout","useWindowSize","width","height","Home","useForm","register","handleSubmit","errors","useState","stats","setStats","hasConfetti","setHasConfetti","index","useParams","questionIndex","Number","updateStats","questionStats","questionImage","formLabel","guessCount","className","onSubmit","formData","guess","guessImage","showImage","max","isCorrect","toLowerCase","guessImages","imageKeys","Object","keys","length","Math","floor","random","type","name","autoComplete","ref","required","onChange","value","cx","src","App","isMenuOpen","setMenuOpen","basename","to","onClick","aria-label","aria-controls","path","pathname","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b4e40d45.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chrisFarley.67ab4047.gif\";","module.exports = __webpack_public_path__ + \"static/media/jamesCorden.a9910605.gif\";","module.exports = __webpack_public_path__ + \"static/media/neilPatrickHarris.0c746bac.gif\";","module.exports = __webpack_public_path__ + \"static/media/dragon.8b0ef686.jpg\";","module.exports = __webpack_public_path__ + \"static/media/albertEinstein.5eda483e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/goodWillHunting.5bbe6285.gif\";","import chrisFarley from './images/heckle/chrisFarley.gif';\nimport jamesCorden from './images/heckle/jamesCorden.gif';\nimport neilPatrickHarris from './images/heckle/neilPatrickHarris.gif';\n\nimport dragon from './images/questions/dragon.jpg';\n\nimport albertEinstein from './images/praise/albertEinstein.jpg';\nimport goodWillHunting from './images/praise/goodWillHunting.gif';\n\nexport const images = {\n  heckle: {\n    chrisFarley,\n    jamesCorden,\n    neilPatrickHarris,\n  },\n  questions: {\n    dragon,\n  },\n  praise: {\n    albertEinstein,\n    goodWillHunting,\n  },\n};\n","import React, { useEffect, useState } from 'react';\nimport cx from 'classnames/bind';\nimport { useForm } from 'react-hook-form'\nimport {\n  BrowserRouter as Router,\n  Link,\n  Route,\n  Switch,\n  useParams,\n  Redirect,\n} from \"react-router-dom\";\nimport useWindowSize from 'react-use/lib/useWindowSize'\nimport ReactConfetti from 'react-confetti'\nimport { images } from './images';\nimport './App.scss';\n\nconst questions = [{\n  answer: 'dragon',\n  image: 'dragon'\n}]\n\nfunction getRandomIndex(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nconst Confetti = ({ stopConfetti }) => {\n  useEffect(() => {\n    setTimeout(stopConfetti, 5000);\n  }, []);\n\n  const { width, height } = useWindowSize()\n  return (\n    <ReactConfetti\n      width={width}\n      height={height}\n    />\n  )\n}\n\n\nconst Home = ({ }) => {\n  const { register, handleSubmit, errors } = useForm()\n  const [stats, setStats] = useState({});\n  const [hasConfetti, setHasConfetti] = useState(false);\n  const { index } = useParams();\n  const questionIndex = Number(index);\n\n  const updateStats = (questionStats) => {\n    setStats({\n      ...stats,\n      [questionIndex]: {\n        ...stats[questionIndex],\n        ...questionStats,\n      }\n    });\n  }\n\n  function onSubmit(formData) {\n    const { guess } = formData;\n    const answer = questions[questionIndex].answer;\n\n    if (!guess) {\n      return;\n    }\n\n    const isCorrect = answer === guess.toLowerCase();\n    const questionStats = stats[questionIndex] ?? {};\n    const guessCount = (questionStats.guessCount ?? 0) + 1;\n\n    let guessImage;\n    let showImage;\n    if (!isCorrect || (isCorrect && guessCount <= 3)) {\n      const guessImages = isCorrect ? images.praise : images.heckle;\n      const imageKeys = Object.keys(guessImages);\n      guessImage = guessImages[imageKeys[getRandomIndex(imageKeys.length)]];\n      showImage = true;\n    }\n\n    updateStats({\n      isCorrect,\n      guessCount,\n      guessImage,\n      showImage,\n    });\n    setHasConfetti(isCorrect);\n  }\n\n  function stopConfetti() {\n    setHasConfetti(false);\n  }\n\n  const questionImage = images.questions.dragon;\n  const questionStats = stats[questionIndex] ?? {};\n\n  let formLabel = 'Guess here';\n  const guessCount = questionStats.guessCount;\n  if (guessCount) {\n    if (guessCount === 1) {\n      formLabel = 'Wowza! You must be a genius!';\n    } else if (guessCount <= 3) {\n      formLabel = 'Ya wicked smaaat';\n    } else {\n      formLabel = `You know what they say, ${guessCount}rd timeâ€™s the charm... wait, nobody says that. Think a little harder next time.`;\n    }\n  }\n\n  return (\n    <>\n      <div className=\"guess\">\n        <form className=\"form\" onSubmit={handleSubmit(onSubmit)}>\n        {/* register your input into the hook by invoking the \"register\" function */}\n          <span className=\"form__label\">{formLabel}</span>\n          <div className=\"form__fields\">\n            <input\n              type=\"text\"\n              name=\"guess\"\n              autoComplete=\"off\"\n              ref={register({ required: true })}\n              onChange={() => {\n                updateStats({ showImage: false })\n              }}\n            />\n            <input type=\"submit\" value=\"ðŸ‘‰ ðŸ”´\" />\n          </div>\n          {errors.guess && (\n            <p className=\"validation-error\">Try a little harder... literally anything is better than your guess.</p>\n          )}\n        </form>\n        <div className={cx('guess__image-container', ({\n          'guess__image-container--hidden': !questionStats.showImage,\n        }))}>\n          <img src={questionStats.guessImage} />\n        </div>\n      </div>\n      <div className=\"question\">\n        <div className=\"question__image-container\">\n          <img src={questionImage} />\n        </div>\n      </div>\n      {hasConfetti && <Confetti stopConfetti={stopConfetti} />}\n    </>\n  )\n}\n\n\nconst App = () => {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n\n  return (\n    <Router basename=\"/playground\">\n      <div className=\"app\">\n        <nav className=\"nav\">\n          <h1 className=\"nav__title\">\n            <Link to=\"/\">Pun fun</Link>\n          </h1>\n          <button\n            className={cx('nav__hamburger hamburger hamburger--collapse', {\n              'is-active': isMenuOpen,\n            })}\n            onClick={() => setMenuOpen(!isMenuOpen)}\n            type=\"button\"\n            aria-label=\"Menu\"\n            aria-controls=\"navigation\"\n          >\n            <span className=\"hamburger-box\">\n              <span className=\"hamburger-inner\"></span>\n            </span>\n          </button>\n        </nav>\n        <div className=\"content\">\n          <Switch>\n            <Route path=\"/:index\">\n              <Home />\n            </Route>\n            <Route path=\"/\">\n              <Redirect to={{ pathname: '/0' }} />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}